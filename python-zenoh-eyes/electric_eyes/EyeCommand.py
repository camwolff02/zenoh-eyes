# automatically generated by the FlatBuffers compiler, do not modify

# namespace: electric_eyes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EyeCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EyeCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEyeCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EyeCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EyeCommand
    def LookUd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # EyeCommand
    def LookLr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # EyeCommand
    def EyeSep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # EyeCommand
    def Blink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def EyeCommandStart(builder):
    builder.StartObject(4)

def Start(builder):
    EyeCommandStart(builder)

def EyeCommandAddLookUd(builder, lookUd):
    builder.PrependInt16Slot(0, lookUd, 0)

def AddLookUd(builder, lookUd):
    EyeCommandAddLookUd(builder, lookUd)

def EyeCommandAddLookLr(builder, lookLr):
    builder.PrependInt16Slot(1, lookLr, 0)

def AddLookLr(builder, lookLr):
    EyeCommandAddLookLr(builder, lookLr)

def EyeCommandAddEyeSep(builder, eyeSep):
    builder.PrependUint16Slot(2, eyeSep, 0)

def AddEyeSep(builder, eyeSep):
    EyeCommandAddEyeSep(builder, eyeSep)

def EyeCommandAddBlink(builder, blink):
    builder.PrependBoolSlot(3, blink, 0)

def AddBlink(builder, blink):
    EyeCommandAddBlink(builder, blink)

def EyeCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return EyeCommandEnd(builder)
